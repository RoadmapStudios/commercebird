<?php
/**
 * Class to import Pricelists from Zoho to WooCommerce using B2B for WooCommerce
 *
 * @package  WooZo Inventory
 */

class ImportPricelistClass {
	use \RMS\Admin\Traits\LogWriter;

	private array $config;

	public function __construct() {
		$this->config = array(
			'ProductZI' => array(
				'OID'    => get_option( 'zoho_inventory_oid' ),
				'APIURL' => get_option( 'zoho_inventory_url' ),
			),
		);
	}

	/**
	 * Get all Zoho price list
	 * Example response:
	 * {
	 *      "currency_code": Code based on currency,
	 *      "currency_id": The currenct id of the currency,
	 *      "decimal_place": Decimal place for pricebook.,
	 *      "description": Description about the pricebook,
	 *      "is_default": To check the default pricebook.Allowed values: true,false,
	 *      "is_increase": Mark up or Mark down to discounts.Allowed values: true,false,
	 *      "name": Name of the pricebook,
	 *      "percentage": About percentage of discounts,
	 *      "pricebook_id": Unique ID generated by server for the price book,
	 *      "pricebook_items": [
	 *          {
	 *              "item_id": Unique ID generated by server for Item,
	 *              "pricebook_rate": Rate of the price book for the Items,
	 *              "pricebook_item_id": Unique ID generated by the server for each pricebook line item
	 *          }
	 *      ],
	 *      "pricebook_type": Type of the pricebook.Allowed values: per_item,fixed_percentage,
	 *      "rounding_type": Type of the rounding.Allowed values: no_rounding,round_to_dollor,round_to_dollar_minus_01,round_to_half_dollar,round_to_half_dollar_minus_01,
	 *      "sales_or_purchase_type": Whether its sales or purchase type.Allowed values: sales,purchases,
	 *      "status": Status of the price book
	 *}
	 * @return array of price list
	 */
	public function zi_get_all_pricelist(): array {
		$in_cache = get_transient( 'zoho_pricelist' );
		if ( $in_cache ) {
			return $in_cache;
		}

		$url                      = $this->config['ProductZI']['APIURL'] . 'api/v1/pricebooks?organization_id=' . $this->config['ProductZI']['OID'];
		$execute_curl_call_handle = new ExecutecallClass();
		$json                     = $execute_curl_call_handle->ExecuteCurlCallGet( $url );

		if ( isset( $json->pricebooks ) ) {
			set_transient( 'zoho_pricelist', $json->pricebooks, MINUTE_IN_SECONDS );

			return $json->pricebooks;
		}

		return array();
	}

	/**
	 * Save pricelist function to update prices and discounts for user roles.
	 *
	 * @param array $post The post-data containing user role and price information.
	 * Example:
	 * {
	 *      "zoho_inventory_pricelist": Zoho inventory pricelist id
	 *      "wp_user_role": WordPress user role
	 * }
	 */
	public function save_price_list( array $post ) {
		if ( class_exists( 'Addify_B2B_Plugin' ) ) {
			$this->addify_b2b( $post['zoho_inventory_pricelist'], $post['wp_user_role'] );
		} elseif ( class_exists( 'WooCommerceB2B' ) ) {
			$this->wc_b2b( $post['zoho_inventory_pricelist'] );
		}
	}

	/**
	 * Get a Zoho price list based on a price book id
	 *
	 * @param int $pricebook_id
	 *
	 * @return array of price list
	 */
	private function get_zoho_pricebook( int $pricebook_id ): array {
		$in_cache = get_transient( 'zoho_pricelist_' . $pricebook_id );
		if ( $in_cache ) {
			return $in_cache;
		}
		$url                      = $this->config['ProductZI']['APIURL'] . 'api/v1/pricebooks/' . $pricebook_id . '?organization_id=' . $this->config['ProductZI']['OID'];
		$execute_curl_call_handle = new ExecutecallClass();
		$json                     = $execute_curl_call_handle->ExecuteCurlCallGet( $url );
		if ( is_object( $json ) && property_exists( $json, 'pricebook' ) ) {
			$json = json_decode( wp_json_encode( $json->pricebook ), true );
			set_transient( 'zoho_pricelist_' . $pricebook_id, $json, DAY_IN_SECONDS );
			update_option( 'zoho_pricelist_id', $pricebook_id );

			return $json;
		}

		return array();
	}

	/**
	 * Get published product ids, based on zi_item_id meta-key
	 *
	 * @return array
	 */
	private function get_zoho_products(): array {
		$in_cache = get_transient( 'zoho_products' );
		if ( $in_cache ) {
			return $in_cache;
		}
		global $wpdb;

		$ids = $wpdb->get_results(
			"SELECT p.ID AS id, pm.meta_value AS zi_item_id
           				 FROM {$wpdb->postmeta} pm
           				 INNER JOIN {$wpdb->posts} p ON pm.post_id = p.ID
           				 WHERE pm.meta_key = 'zi_item_id'
           				 AND p.post_type = 'product'
           				 AND p.post_status = 'publish'
           				 AND pm.meta_value != ''",
			ARRAY_A
		);

		$plist = wp_list_pluck( $ids, 'id', 'zi_item_id' );
		ksort( $plist );
		set_transient( 'zoho_products', $plist, DAY_IN_SECONDS );

		return $plist;
	}

	/**
	 * Support For Addify B2B
	 *
	 * @param int $pricebook_id pricebook id
	 * @param string $role user role
	 */
	private function addify_b2b( int $pricebook_id, string $role ) {
		$price_book  = $this->get_zoho_pricebook( $pricebook_id );
		$zi_item_ids = $this->get_zoho_products();

		if ( empty( $price_book ) ) {
			return;
		}

		$meta_collection = array();
		if ( isset( $price_book['pricebook_type'] ) && $price_book['pricebook_type'] === 'fixed_percentage' ) {
			$meta_collection['price']   = $price_book['percentage'] ?? 0;
			$meta_collection['ids']     = array_fill_keys( array_values( $zi_item_ids ), $meta_collection['price'] );
			$meta_collection['orderby'] = $price_book['is_increase'] ? 'percentage_increase' : 'percentage_decrease';
		} else {
			$meta_collection['orderby'] = 'fixed_price';
			foreach ( $price_book['pricebook_items'] as $itemlist ) {
				if ( isset( $zi_item_ids[ $itemlist['item_id'] ] ) ) {
					$meta_collection['ids'][ $zi_item_ids[ $itemlist['item_id'] ] ] = array();
					if ( is_array( $itemlist['price_brackets'] ) && ! empty( $itemlist['price_brackets'] ) ) {
						$priceBracket = $itemlist['price_brackets'][0];
						$meta_collection['ids'][ $zi_item_ids[ $itemlist['item_id'] ] ] = array(
							'start_quantity' => $priceBracket['start_quantity'] ?? 0,
							'end_quantity'   => $priceBracket['end_quantity'] ?? 0,
							'pricebook_rate' => $priceBracket['pricebook_rate'] ?? 0,
						);
					} else {
						$meta_collection['ids'][ $zi_item_ids[ $itemlist['item_id'] ] ] = $itemlist['pricebook_rate'] ?? 0;
					}
				}
			}
		}

		if ( empty( $meta_collection['ids'] ) ) {
			return;
		}

		foreach ( $meta_collection['ids'] as $product_id => $price ) {
			$formatted_price = str_replace( '.', wc_get_price_decimal_separator(), $meta_collection['price'] ?? $price );
			$metavalue       = array(
				'discount_type'  => $meta_collection['orderby'],
				'user_role'      => $role,
				'discount_value' => is_array( $formatted_price ) ? $formatted_price['pricebook_rate'] : $formatted_price,
				'min_qty'        => is_array( $formatted_price ) ? $formatted_price['start_quantity'] : '',
				'max_qty'        => is_array( $formatted_price ) ? $formatted_price['end_quantity'] : '',
			);
			$postmeta_array  = get_post_meta( $product_id, '_role_base_price', true );
			$updated         = false;

			if ( is_array( $postmeta_array ) && ! empty( $postmeta_array ) ) {
				foreach ( $postmeta_array as &$postmeta ) {
					if ( $postmeta['user_role'] === $role ) {
						$postmeta = $metavalue;
						$updated  = true;
						break;
					}
				}
				if ( ! $updated ) {
					$postmeta_array[] = $metavalue;
				}
			}

			update_post_meta( $product_id, '_role_base_price', $postmeta_array );
		}
	}

	public function wcb2b_synced_groups() {
		$in_cache = get_transient( 'wcb2b_synced_groups' );
		if ( ! empty( $in_cache ) ) {
			return $in_cache;
		}
		global $wpdb;

		$results = $wpdb->get_results(
			"SELECT p.post_title AS group_name, pm.meta_value AS pricebook
				FROM {$wpdb->posts} p
				INNER JOIN {$wpdb->postmeta} pm ON p.ID = pm.post_id
				WHERE pm.meta_key = 'pricebook_name'
				AND p.post_type = 'wcb2b_group'",
			ARRAY_A
		);

		set_transient( 'wcb2b_synced_groups', $results, DAY_IN_SECONDS );

		return $results;
	}

	private function wc_b2b( $pricebook_id ) {
		delete_transient( 'wcb2b_synced_groups' );
		$price_book  = $this->get_zoho_pricebook( $pricebook_id );
		$zi_item_ids = $this->get_zoho_products();
		$groups      = $this->wc_b2b_groups();
		if ( empty( $price_book ) ) {
			return;
		}

		switch ( $price_book['pricebook_type'] ) {
			case 'fixed_percentage':
				$discount = wcb2b_price_format( $price_book['percentage'] );
				foreach ( $groups['global'] as $id ) {
					update_post_meta( $id, 'wcb2b_group_discount', $discount );
					update_post_meta( $id, 'pricebook_id', $pricebook_id );
					update_post_meta( $id, 'pricebook_name', $price_book['name'] );
				}
				break;
			case 'per_item':
				foreach ( $price_book['pricebook_items'] as $pricebook_item ) {
					if ( ! isset( $zi_item_ids[ $pricebook_item['item_id'] ] ) ) {
						continue;
					}
					$product_id           = $zi_item_ids[ $pricebook_item['item_id'] ];
					$product_group_prices = $product_group_min = $product_group_max = array();
					foreach ( $groups['single'] as $group_id ) {
						if ( is_array( $pricebook_item['price_brackets'] ) && count( $pricebook_item['price_brackets'] ) > 0 ) {
							$price = $pricebook_item['price_brackets'][0]['pricebook_rate'];
							$product_group_prices[ $group_id ]['regular_price'] = wcb2b_price_format( $price );
							$product_group_min[ $group_id ]                     = $pricebook_item['price_brackets'][0]['start_quantity'];
							$product_group_max[ $group_id ]                     = $pricebook_item['price_brackets'][0]['end_quantity'];
						} else {
							$product_group_prices[ $group_id ]['regular_price'] = wcb2b_price_format( $pricebook_item['pricebook_rate'] );
						}
						update_post_meta( $group_id, 'pricebook_id', $pricebook_id );
						update_post_meta( $group_id, 'pricebook_name', $price_book['name'] );
					}
					if ( ! empty( $product_group_prices ) ) {
						update_post_meta( $product_id, 'wcb2b_product_group_prices', $product_group_prices );
					}
					if ( ! empty( $product_group_min ) ) {
						update_post_meta( $product_id, 'wcb2b_product_group_min', $product_group_min );
					}
					if ( ! empty( $product_group_max ) ) {
						update_post_meta( $product_id, 'wcb2b_product_group_max', $product_group_max );
					}
				}
				break;
			default:
				break;
		}
	}

	/**
	 * Retrieves and caches the B2B groups from the database.
	 *
	 * @return array The B2B groups data.
	 */
	private function wc_b2b_groups() {
		$in_cache = get_transient( 'wc_b2b_groups' );
		if ( ! empty( $in_cache ) ) {
			return $in_cache;
		}
		global $wpdb;

		$results = $wpdb->get_results(
			"SELECT p.ID AS id, pm.meta_value AS rule
			        FROM {$wpdb->posts} p
			        INNER JOIN {$wpdb->postmeta} pm ON p.ID = pm.post_id
			        WHERE p.post_type = 'wcb2b_group'
			        AND pm.meta_key = 'wcb2b_group_price_rule'",
			ARRAY_A // Return results as an associative array
		);

		if ( empty( $results ) ) {
			return array();
		}
		$grouped_data = array_reduce(
			$results,
			function ( $result, $item ) {
				$result[ $item['rule'] ][] = $item['id'];

				return $result;
			},
			array()
		);

		set_transient( 'wc_b2b_groups', $grouped_data, DAY_IN_SECONDS );

		return $grouped_data;
	}
}
